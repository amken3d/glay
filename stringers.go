// Code generated by "stringer -linecomment -output=stringers.go -type=ElementConfigType,LayoutDirection,LayoutAlignmentX,LayoutAlignmentY,SizingType,TextElementConfigWrapMode,TextAlignment,FloatingAttachPointType,MousePointerCaptureMode,FloatingAttachToElement,RenderCommandType,Error"; DO NOT EDIT.

package glay

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElementConfigTypeNone-0]
	_ = x[ElementConfigTypeBorder-1]
	_ = x[ElementConfigTypeFloating-2]
	_ = x[ElementConfigTypeScroll-3]
	_ = x[ElementConfigTypeImage-4]
	_ = x[ElementConfigTypeText-5]
	_ = x[ElementConfigTypeCustom-6]
	_ = x[ElementConfigTypeShared-7]
}

const _ElementConfigType_name = "element config noneelement config borderelement config floatingelement config scrollelement config imageelement config textelement config customelement config shared"

var _ElementConfigType_index = [...]uint8{0, 19, 40, 63, 84, 104, 123, 144, 165}

func (i ElementConfigType) String() string {
	if i >= ElementConfigType(len(_ElementConfigType_index)-1) {
		return "ElementConfigType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ElementConfigType_name[_ElementConfigType_index[i]:_ElementConfigType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LeftToRight-0]
	_ = x[TopToBottom-1]
}

const _LayoutDirection_name = "left to righttop to bottom"

var _LayoutDirection_index = [...]uint8{0, 13, 26}

func (i LayoutDirection) String() string {
	if i >= LayoutDirection(len(_LayoutDirection_index)-1) {
		return "LayoutDirection(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LayoutDirection_name[_LayoutDirection_index[i]:_LayoutDirection_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AlignXLeft-0]
	_ = x[AlignXRight-1]
	_ = x[AlignXCenter-2]
}

const _LayoutAlignmentX_name = "align x leftalign x rightalign x center"

var _LayoutAlignmentX_index = [...]uint8{0, 12, 25, 39}

func (i LayoutAlignmentX) String() string {
	if i >= LayoutAlignmentX(len(_LayoutAlignmentX_index)-1) {
		return "LayoutAlignmentX(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LayoutAlignmentX_name[_LayoutAlignmentX_index[i]:_LayoutAlignmentX_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AlignYTop-0]
	_ = x[AlignYBottom-1]
	_ = x[AlignYCenter-2]
}

const _LayoutAlignmentY_name = "align y topalign y bottomalign y center"

var _LayoutAlignmentY_index = [...]uint8{0, 11, 25, 39}

func (i LayoutAlignmentY) String() string {
	if i >= LayoutAlignmentY(len(_LayoutAlignmentY_index)-1) {
		return "LayoutAlignmentY(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LayoutAlignmentY_name[_LayoutAlignmentY_index[i]:_LayoutAlignmentY_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SizingFit-0]
	_ = x[SizingGrow-1]
	_ = x[SizingPercent-2]
	_ = x[SizingFixed-3]
}

const _SizingType_name = "sizing fitsizing growsizing percentsizing fixed"

var _SizingType_index = [...]uint8{0, 10, 21, 35, 47}

func (i SizingType) String() string {
	if i >= SizingType(len(_SizingType_index)-1) {
		return "SizingType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SizingType_name[_SizingType_index[i]:_SizingType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextWrapWords-0]
	_ = x[TextWrapNewlines-1]
	_ = x[TextWrapNone-2]
}

const _TextElementConfigWrapMode_name = "text wrap wordstext wrap newlinestext wrap none"

var _TextElementConfigWrapMode_index = [...]uint8{0, 15, 33, 47}

func (i TextElementConfigWrapMode) String() string {
	if i >= TextElementConfigWrapMode(len(_TextElementConfigWrapMode_index)-1) {
		return "TextElementConfigWrapMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextElementConfigWrapMode_name[_TextElementConfigWrapMode_index[i]:_TextElementConfigWrapMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TextAlignLeft-0]
	_ = x[TextAlignCenter-1]
	_ = x[TextAlignRight-2]
}

const _TextAlignment_name = "text align lefttext align centertext align right"

var _TextAlignment_index = [...]uint8{0, 15, 32, 48}

func (i TextAlignment) String() string {
	if i >= TextAlignment(len(_TextAlignment_index)-1) {
		return "TextAlignment(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TextAlignment_name[_TextAlignment_index[i]:_TextAlignment_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttachPointLeftTop-0]
	_ = x[AttachPointLeftCenter-1]
	_ = x[AttachPointLeftBottom-2]
	_ = x[AttachPointCenterTop-3]
	_ = x[AttachPointCenterCenter-4]
	_ = x[AttachPointCenterBottom-5]
	_ = x[AttachPointRightTop-6]
	_ = x[AttachPointRightCenter-7]
	_ = x[AttachPointRightBottom-8]
}

const _FloatingAttachPointType_name = "attach left topattach left centerattach left bottomattach center topattach center centerattach center bottomattach right topattach right centerattach right bottom"

var _FloatingAttachPointType_index = [...]uint8{0, 15, 33, 51, 68, 88, 108, 124, 143, 162}

func (i FloatingAttachPointType) String() string {
	if i >= FloatingAttachPointType(len(_FloatingAttachPointType_index)-1) {
		return "FloatingAttachPointType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FloatingAttachPointType_name[_FloatingAttachPointType_index[i]:_FloatingAttachPointType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PointerCaptureModeCapture-0]
	_ = x[PointerCaptureModePassthrough-1]
}

const _MousePointerCaptureMode_name = "pointer mode capturepointer mode passthrough"

var _MousePointerCaptureMode_index = [...]uint8{0, 20, 44}

func (i MousePointerCaptureMode) String() string {
	if i >= MousePointerCaptureMode(len(_MousePointerCaptureMode_index)-1) {
		return "MousePointerCaptureMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MousePointerCaptureMode_name[_MousePointerCaptureMode_index[i]:_MousePointerCaptureMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttachToNone-0]
	_ = x[AttachToParent-1]
	_ = x[AttachToElementWithID-2]
	_ = x[AttachToRoot-3]
}

const _FloatingAttachToElement_name = "attach to noneattach to parentattach to element with IDattach to root"

var _FloatingAttachToElement_index = [...]uint8{0, 14, 30, 55, 69}

func (i FloatingAttachToElement) String() string {
	if i >= FloatingAttachToElement(len(_FloatingAttachToElement_index)-1) {
		return "FloatingAttachToElement(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FloatingAttachToElement_name[_FloatingAttachToElement_index[i]:_FloatingAttachToElement_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RenderCommandTypeNone-0]
	_ = x[RenderCommandTypeRectangle-1]
	_ = x[RenderCommandTypeBorder-2]
	_ = x[RenderCommandTypeText-3]
	_ = x[RenderCommandTypeImage-4]
	_ = x[RenderCommandTypeScissorStart-5]
	_ = x[RenderCommandTypeScissorEnd-6]
	_ = x[RenderCommandTypeCustom-7]
}

const _RenderCommandType_name = "render:nonerender:rectanglerender:borderrender:textrender:imagerender:scissor-startrender:scissor-endrender:custom"

var _RenderCommandType_index = [...]uint8{0, 11, 27, 40, 51, 63, 83, 101, 114}

func (i RenderCommandType) String() string {
	if i >= RenderCommandType(len(_RenderCommandType_index)-1) {
		return "RenderCommandType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RenderCommandType_name[_RenderCommandType_index[i]:_RenderCommandType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ErrTextMeasurementFunctionNotProvided-0]
	_ = x[ErrPercentageOver1-1]
	_ = x[ErrFloatingContainerParentNotFound-2]
	_ = x[ErrElementsCapacityExceeded-3]
}

const _Error_name = "a text measurement function wasn't provided using Clay_SetMeasureTextFunction(), or the provided function was nullan element was configured with CLAY_SIZING_PERCENT, but the provided percentage value was over 1.0. Clay expects a value between 0 and 1, i.e. 20% is 0.2a floating element was declared with a parentId, but no element with that ID was foundClay ran out of capacity while attempting to create render commands. This is usually caused by a large amount of wrapping text elements while close to the max element capacity. Try using Clay_SetMaxElementCount() with a higher value"

var _Error_index = [...]uint16{0, 114, 267, 353, 585}

func (i Error) String() string {
	if i >= Error(len(_Error_index)-1) {
		return "Error(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Error_name[_Error_index[i]:_Error_index[i+1]]
}
